use('mflix');

db.comments.findOne()
/*
        PRACTICO 1
*/

// EJERCICIO 1

/* 
Insertar 5 nuevos usuarios en la colección users. Para cada nuevo usuario creado, 
insertar al menos un comentario realizado por el usuario en la colección comments.
*/
db.users.insertMany([
  {
    "email": "buenastardes@famaf.com",
    "name": "buenas tardes",
    "password": "semisol"
  },
  {
    "email": "buenasmañanas@famaf.com",
    "name": "buenas mañanas",
    "password": "sol"
  },
  {
    "email": "buenasnoches@famaf.com",
    "name": "buenas noches",
    "password": "oscuro"
  },
  {
    "email": "feliznavidad@famaf.com",
    "name": "feliz navidad",
    "password": "diciembre"
  },
  {
    "email": "felizcumpleaños@famaf.com",
    "name": "feliz cumpleaños",
    "password": "agosto"
  }
]
);
db.comments.insertOne(
  {
    "email": "felizcumpleaños@famaf.com",
    "movie_id": "573a1390f29313caabcd418c",
    "name": "feliz cumpleaños",
    "text": "Feliz cumpleaños mi loco"
  }
);

// EJERCICIO 2
/* Listar el título, año, actores (cast), directores y rating de las 10 películas con mayor 
rating (“imdb.rating”) de la década del 90. ¿Cuál es el valor del rating de la película 
que tiene mayor rating? (Hint: Chequear que el valor de “imdb.rating” sea de tipo “double”).
 */

db.movies.find(
  { $and: [{ "year": { $gte: 1990 } }, { "year": { $lte: 2000 } }] },
  {
    "title": 1, "year": 1, "cast": 1, "directors": 1, "imdb.rating": 1
  }
).sort({ "imdb.rating": 1 }).limit(10);

// EJERCICIO 3
/* 
Listar el nombre, email, texto y fecha de los comentarios que la película con id
(movie_id) ObjectId("573a1399f29313caabcee886") recibió entre los años 2014 y 2016
inclusive. Listar ordenados por fecha. Escribir una nueva consulta (modificando la
anterior) para responder ¿Cuántos comentarios recibió?
*/

//crtl + shift + i -> Para formatear el código

db.comments.find(
  {
    "movie_id": ObjectId("573a1399f29313caabcee886"),
    "date": {
      $gte: new Date("2014-01-01T00:00:00Z"),
      $lte: new Date("2016-12-31T23:59:59Z")
    }
  },
  {
    "name": 1, "email": 1, "text": 1, "date": 1
  }
).sort({ "date": 1 })
// ¿Cuántos comentarios recibió?
db.comments.countDocuments(
  {
    "movie_id": ObjectId("573a1399f29313caabcee886"),
    "date": {
      $gte: new Date("2014-01-01T00:00:00Z"),
      $lte: new Date("2016-12-31T23:59:59Z")
    }
  },
  {
    "name": 1, "email": 1, "text": 1, "date": 1
  }
)

//EJERCICIO 4
/*
Listar el nombre, id de la película, texto y fecha de los 3 comentarios más recientes
realizados por el usuario con email patricia_good@fakegmail.com.
*/
db.comments.find(
  {
    "email": ("patricia_good@fakegmail.com")
  },
  {
    "name": 1, "movie_id": 1, "text": 1, "date": 1
  }
).sort({ "date": -1 }).limit(3)

//EJERCICIO 5
/* 
Listar el título, idiomas (languages), géneros, fecha de lanzamiento (released) y número
de votos (“imdb.votes”) de las películas de géneros Drama y Action (la película puede
tener otros géneros adicionales), que solo están disponibles en un único idioma y por
último tengan un rating (“imdb.rating”) mayor a 9 o bien tengan una duración (runtime)
de al menos 180 minutos. Listar ordenados por fecha de lanzamiento y número de
votos.
*/
db.movies.find(
  {
    "genres": { $all: ["Drama", "Action"] },
    $or: [{ "imdb.rating": { $gt: 9 } }, { "runtime": { $gte: 180 } }],
    "countries": { $size: 1 }
  },
  {
    "countries": 1,
    "genres": 1,
    "year": 1,
    "imdb.votes": 1
  }
).sort({ "year": 1, "idmb.votes": 1 })

//EJERCICIO 6
/*
Listar el id del teatro (theaterId), estado (“location.address.state”), ciudad
(“location.address.city”), y coordenadas (“location.geo.coordinates”) de los teatros que
se encuentran en algunos de los estados "CA", "NY", "TX" y el nombre de la ciudades
comienza con una ‘F’. Listar ordenados por estado y ciudad.
*/
db.theaters.find(
  {
    "location.address.city": { $regex: /^F/ },
    "location.address.state": { $in: ["CA", "NY", "TX"] },
  },
  {
    "theaterId": 1,
    "location.address.state": 1,
    "location.address.city": 1,
    "location.geo.coordinates": 1
  }
).sort({ "location.address.state": 1, "location.address.city": 1 })

//EJERCICIO 7 
/*  
Actualizar los valores de los campos texto (text) y fecha (date) del comentario cuyo id es
ObjectId("5b72236520a3277c015b3b73") a "mi mejor comentario" y fecha actual
respectivamente.
*/

db.comments.updateOne(
  { "_id": ObjectId("5b72236520a3277c015b3b73") },
  {
    $set: {
      "text": "mi mejor comentario",
      "date": new Date
    }
  }
)

//EJERCICIO 8
/*
Actualizar el valor de la contraseña del usuario cuyo email es
joel.macdonel@fakegmail.com a "some password". La misma consulta debe poder
insertar un nuevo usuario en caso que el usuario no exista. Ejecute la consulta dos
veces. ¿Qué operación se realiza en cada caso? (Hint: usar upserts).
*/

db.user.updateOne(
  { "email": "joel.macdonel@fakegmail.com" },
  {
    $set: { "password": "some password" }
  },
  { upsert: true }
)

db.user.find(
  {"email": "joel.macdonel@fakegmail.com"},
  {}
)

//EJERCICIO 9
/* 
Remover todos los comentarios realizados por el usuario cuyo email es
victor_patel@fakegmail.com durante el año 1980
*/

db.comments.deleteMany(
  {
    "email":"victor_patel@fakegmail.com",
    "date": {
      $gte: new Date("1980-01-01T00:00:00Z"),
      $lte: new Date("1980-12-31T23:59:59Z")
    }
  },
  {}
)

//EJERCICIO 10
/* 
Listar el id del restaurante (restaurant_id) y las calificaciones de los restaurantes donde
al menos una de sus calificaciones haya sido realizada entre 2014 y 2015 inclusive, y
que tenga una puntuación (score) mayor a 70 y menor o igual a 90.
*/

db.restaurants.find(
  {
    "$elemMatch":{
      "grades.date": {
      $gte: new Date("2014-01-01T00:00:00Z"),
      $lte: new Date("2015-12-31T23:59:59Z")
     },
      "grades.score": {"$gt": 40, "$lte": 90}
    }
  },
  {
    "_id":1 , "grades.score":1
  }
)

db.restaurants.find(
  {
    grades: {
      "$elemMatch": {
        "date": {
          "$gte": new Date("2014-01-01T00:00:00Z"),
          "$lte": new Date("2015-12-31T23:59:59Z")
        },
        "score": { "$gt": 70, "$lte": 90 }
      }
    }
  },
  {
    "restaurant_id": 1,
    "grades": 1
  }
)


//EJERCICIO 11
/* 
Agregar dos nuevas calificaciones al restaurante cuyo id es "50018608". A continuación
se especifican las calificaciones a agregar en una sola consulta.
*/

db.restaurants.updateOne(
  { "restaurant_id": ("50018608") },
  { 
    "$push": { //Añade un elemento al final de un arreglo en un documento
      "grades": { 
        "$each": [ //Se usa en combinación con push para agregar varios elementos a la vez a un arreglo
          {
            "date": ISODate("2019-10-10T00:00:00Z"),
            "grade": "A",
            "score": 18
          },
          {
            "date": ISODate("2020-02-25T00:00:00Z"),
            "grade": "A",
            "score": 21
          }
        ]
      }
    }
  }
)
